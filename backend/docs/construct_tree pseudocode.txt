This is the central method of maketree.py. It takes in a list of TMRs and atomic actions
and attempts to place them into a hierarchical tree structure.

function construct_tree:
	make a TreeNode to be the root
	set the current node to be the root
	
	for each action or utterance in the input:
	
		if this input is an utterance:
			
			if there are no events in its tmr:
				continue

			else if its tmr is in past tense:
				if the theme of the current tmr is a part of the theme of this tmr (note: the previous input is the last child of the "current" node)
					step up the tree until something that is not about a part of the theme of this tmr is found
					and set that as the current node
					
					make a new TreeNode with the tmr
					
					set a pivot j such that, for all children of current after the jth, about_part_of(current, new) holds
					(Note: it might actually make more sense to define j such that for all children *before* the jth, about_part_of does *not* hold)
					
					set the children of the current before the jth as questioned between the current and the new
					set the children of the current after the jth as only belonging to the new
					set the new as a child of the current (note: this may not always be the correct placement)
											
				else if previous input was an action:
					if that action currently is a child of a nameless node:
						mark that node with this utterance
					else if the theme of the new input is part of the theme of the previous input:
						insert a node for the new input between the previous node and its children
					else:
						mark all children of previous node (which should all be actions) as questioned
						(i.e. they might belong to previous node, but they might belong to this node)
				else:
					this situation hasn't come up yet, but more heuristics will be added here when it does

			else: (the input is a pre-utterance)
				Check to see if this is about part of an existing node higher in the tree.
				(Note: This section still needs testing, pending relevant input.)

				look up the tree to see if this is about a part of the theme of an ancestor of the current node
				if so, set that ancestor as the current node
				
				make a new TreeNode with this tmr and set it as a child of the current
				if the next step in the input is not an action, set this new node as the current,
					so that the next utterance will be added under the new node
				
		else: (the input is an action)
			if the last children of the current node already has children of its own:
				make an nameless child of the current node
			
			set this action (and all consecutive actions after it) as children of the last child of the current node
			
		disambiguate(root)
		add description of tree to output list
	return root