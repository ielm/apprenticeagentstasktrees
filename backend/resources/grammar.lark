start: (view)

// Bootstrap

bootstrap: ((declare_knowledge | append_knowledge | define) BOOTSTRAPDELIMITER)*

declare_knowledge: "@" graph "." name (declare_knowledge_instance)? "=" "{" (declare_knowledge_element (BOOTSTRAPDELIMITER declare_knowledge_element)*)? (BOOTSTRAPDELIMITER)? "}"
declare_knowledge_instance: "." (instance | GENERATE_INSTANCE)
declare_knowledge_element: (declare_isa_knowledge | declare_property_knowledge)
declare_isa_knowledge: DISA "@" identifier
declare_property_knowledge: slot (facet)? filler

append_knowledge: "@" identifier "+=" "{" (append_knowledge_element (BOOTSTRAPDELIMITER append_knowledge_element)*)? (BOOTSTRAPDELIMITER)? "}"
append_knowledge_element: (append_property_knowledge)
append_property_knowledge: slot (facet)? filler

slot: NAME
facet: (SEM | DEFAULT | VALUE | NOT)
filler: ("@" identifier | literal)

BOOTSTRAPDELIMITER: ";"
DISA: "isa"i
GENERATE_INSTANCE: "?"
SEM: "sem"i
VALUE: "value"i

// Statements and executables

define: DEFINE goal
goal: NAME arguments AS GOAL IN GRAPH priority resources (action)* (condition)*
priority: (PRIORITY (double | mp_statement))?
resources: (RESOURCES (double | mp_statement))?
goal_status: (PENDING | ACTIVE | ABANDONED | SATISFIED)

action: ACTION "(" ACTION_NAME ")" action_selection action_do+
action_selection: SELECT (DEFAULT | IF boolean_statement)
action_do: DO (statement | IDLE)

condition: WHEN (condition_and | condition_or | condition_nand | condition_nor | condition_not) THEN goal_status
condition_and: boolean_statement (AND boolean_statement)*
condition_or: boolean_statement (OR boolean_statement)+
condition_nand: boolean_statement (NAND boolean_statement)+
condition_nor: boolean_statement (NOR boolean_statement)+
condition_not: boolean_statement (NOT boolean_statement)+

statement: (add_filler_statement | assign_filler_statement | capability_statement | exists_statement | foreach_statement | is_statement | make_instance_statement | mp_statement)
boolean_statement: (exists_statement | is_statement)

add_filler_statement: statement_instance "[" NAME "]" "+=" (statement_instance | literal)
assign_filler_statement: statement_instance "[" NAME "]" "=" (statement_instance | literal)
capability_statement: CAPABILITY statement_instance arguments ("|" THEN action_do)*
exists_statement: EXISTS logical_slot_query
foreach_statement: FOR EACH ARGUMENT IN logical_slot_query ("|" statement)*
is_statement: statement_instance "[" NAME "]" EQUALS EQUALS literal
make_instance_statement: "@" (graph | special_agent_graph) ":" identifier arguments
mp_statement: SELF "." MP arguments

statement_instance: (SELF | "#" identifier | make_instance_statement | argument)
special_agent_graph: "AGENT." (INTERNAL | EXE | ONTOLOGY | WM | LT) "!"
arguments: "(" (argument ("," argument)*)? ")"
argument: ARGUMENT

ABANDONED: "abandoned"i
ACTION: "action"i
ACTIVE: "active"i
AS: "as"i
CAPABILITY: "capability"i
DEFAULT: "default"i
DEFINE: "define"i
DO: "DO"i
EACH: "each"i
EXE: "exe"i
EXISTS: "exists"i
FOR: "for"i
GOAL: "goal"i
IDLE: "idle"i
IF: "if"i
IN: "in"i
INTERNAL: "internal"i
LT: "lt"i
NAND: "nand"i
NOR: "nor"i
ONTOLOGY: "ontology"i
PENDING: "pending"i
PRIORITY: "priority"i
RESOURCES: "resources"i
SATISFIED: "satisfied"i
SELECT: "select"i
SELF: "self"i
WHEN: "when"i
WM: "wm"i

ACTION_NAME: /(?!True|False)[a-zA-Z\.\*\_\- ]+/i
ARGUMENT: /\$[a-zA-Z0-9]+/
MP: /[a-zA-Z0-9\_]+/

// Views and querying

view: VIEW graph (view_all | view_query) (FOLLOW path (AND FOLLOW path)*)?
view_all: SHOW ALL
view_query: frame_query

path: step ((THEN)? step)*
step: "[" relation (RECURSIVE)? "]->" (to)?
relation: (RELATION | WILDCARD)
to: TO logical_slot_query

frame_query: (SHOW FRAMES)? WHERE logical_slot_query
logical_slot_query: (frame_id_query | "(" frame_id_query ")" | slot_query | "(" slot_query ")" | logical_and_slot_query | logical_or_slot_query | logical_not_slot_query | logical_exact_slot_query)
frame_id_query: "@" identifier_query
logical_and_slot_query: "(" logical_slot_query (AND logical_slot_query)+ ")"
logical_or_slot_query: "(" logical_slot_query (OR logical_slot_query)+ ")"
logical_not_slot_query: NOT logical_slot_query
logical_exact_slot_query: EXACTLY logical_and_slot_query

slot_query: (slot_name_only_query | slot_name_fillers_query)
slot_name_only_query: HAS NAME
slot_name_fillers_query: (NAME | WILDCARD) (logical_filler_query)
logical_filler_query: (filler_query | "(" filler_query ")" | logical_and_filler_query | logical_or_filler_query | logical_not_filler_query | logical_exact_filler_query)
logical_and_filler_query: "(" logical_filler_query (AND logical_filler_query)+ ")"
logical_or_filler_query: "(" logical_filler_query (OR logical_filler_query)+ ")"
logical_not_filler_query: NOT logical_filler_query
logical_exact_filler_query: EXACTLY logical_and_filler_query

filler_query: (identifier_query | literal_query)
identifier_query: (FROM_CONCEPT)? (EQUALS | ISA | ISPARENT | SUBCLASSES) (EXPAND_SETS_DISABLED)? identifier
literal_query: EQUALS literal

literal: (integer | double | string | boolean)
boolean: (TRUE | FALSE)
integer: INTEGER
double: INTEGER "." INTEGER
string: ("\"") STRING ("\"")

identifier: (graph ".")? name ("." instance)?
graph: (GRAPH | tmr)
tmr: "TMR" "#" INTEGER
name: NAME
instance: INSTANCE

ALL: "all"i
AND: "and"i
EXACTLY: "exactly"i
FALSE: "false"i
FOLLOW: "follow"i
FRAMES: "frames"i
HAS: "has"i
NOT: "not"i
OR: "or"i
SHOW: "show"i
THEN: "then"i
TO: "to"i
TRUE: "true"i
VIEW: "view"i
WHERE: "where"i

DASH: "-"
EQUALS: "="
EXPAND_SETS_DISABLED: "!"
FROM_CONCEPT: "~"
ISA: "^"
ISPARENT: "^."
RECURSIVE: "*"
SUBCLASSES: ">"

GRAPH: /[a-zA-Z]+/
NAME: /(?!True|False|isa)[a-zA-Z\.\*\_\-]+/i
INSTANCE: /[0-9]+/
RELATION: /[a-zA-Z0-9\-]+/
WILDCARD: "*"

INTEGER: /[0-9]+/
ALPHA: /[a-zA-Z]+/
SYMBOL: /[\_]+/
STRING: /[0-9a-zA-z\_\-\>]+/

COMMENT: /#.*\n/
WHITESPACE: (" " | /\t/ | /\n/)+
%ignore COMMENT
%ignore WHITESPACE