// Effectors and capabilities

@EXE.FETCH-OBJECT-CAPABILITY = {
    ISA @EXE.CAPABILITY;
    MP "fetch_object_capability";
    COVERS-EVENT @ONT.TAKE;
};

@EXE.INIT-GOAL-CAPABILITY = {
    ISA @EXE.CAPABILITY;
    MP "init_goal_capability";
    COVERS-EVENT @ONT.MENTAL-EVENT;
};

@EXE.SPEAK-CAPABILITY = {
    ISA @EXE.CAPABILITY;
    MP  "speak_capability";
};

@SELF.PHYSICAL-EFFECTOR.1 = {
    ISA @EXE.PHYSICAL-EFFECTOR;
    HAS-CAPABILITY @EXE.FETCH-OBJECT-CAPABILITY;
    STATUS "FREE";
};

@SELF.MENTAL-EFFECTOR.1 = {
    ISA @EXE.MENTAL-EFFECTOR;
    HAS-CAPABILITY @EXE.INIT-GOAL-CAPABILITY;
    STATUS "FREE";
};

@SELF.VERBAL-EFFECTOR.1 = {
    ISA @EXE.VERBAL-EFFECTOR;
    HAS-CAPABILITY @EXE.SPEAK-CAPABILITY;
    STATUS "FREE";
};

@SELF.ROBOT.1 += {
    PRIORITY_WEIGHT 1.5;
    RESOURCES_WEIGHT 0.25;
    HAS-EFFECTOR @SELF.PHYSICAL-EFFECTOR.1;
    HAS-EFFECTOR @SELF.MENTAL-EFFECTOR.1;
    HAS-EFFECTOR @SELF.VERBAL-EFFECTOR.1;
};

@LT.HUMAN.1 = {
    ISA @ONT.HUMAN;
    HAS-NAME "Jake";
};

@LT.TEACH.1 = {
    ISA @ONT.TEACH;
    AGENT @LT.HUMAN.1;
    BENEFICIARY @SELF.ROBOT.1;
    THEME @LT.BUILD.1;
};

// ENVIRONMENT ---------------------

@ENV.EPOCH = {};

@ENV.WORKSPACE.1 = {};
@ENV.STORAGE.1 = {};
@ENV.STORAGE.2 = {};

@ENV.SCREWDRIVER.1 = {
    ISA @ONT.SCREWDRIVER;
};

@ENV.BRACKET.1 = {
    ISA @ONT.BRACKET;
    SIDE-TB "BOTTOM";
};

@ENV.DOWEL.1 = {
    ISA @ONT.DOWEL;
};

@ENV.HUMAN.1 = {
    ISA @ONT.HUMAN;
    RESOLVED-TO @LT.HUMAN.1;
};

@ENV.EPOCH.1 = {
    TIME 0;
    CONTAINS @ENV.HUMAN.1;
    CONTAINS @ENV.SCREWDRIVER.1;
    CONTAINS @ENV.BRACKET.1;
    CONTAINS @ENV.DOWEL.1;
    LOCATION @ENV.LOCATION.1;
    LOCATION @ENV.LOCATION.2;
    LOCATION @ENV.LOCATION.3;
    LOCATION @ENV.LOCATION.4;
};

@ENV.LOCATION.1 = {
    DOMAIN @ENV.SCREWDRIVER.1;
    RANGE @ENV.STORAGE.1;
};

@ENV.LOCATION.2 = {
    DOMAIN @ENV.BRACKET.1;
    RANGE @ENV.STORAGE.1;
};

@ENV.LOCATION.3 = {
    DOMAIN @ENV.DOWEL.1;
    RANGE @ENV.STORAGE.2;
};

// Define TEMPLATES ----------------

DEFINE init-goal($definition, $params) AS TEMPLATE
    TYPE MENTAL
    REQUIRES @EXE.INIT-GOAL-CAPABILITY
    ROOT @OUT.INIT-GOAL.1
    INCLUDE

    @OUT.INIT-GOAL.1 = {
        AGENT @SELF;
        THEME $definition;
        PARAMS $params;
    }
;

DEFINE fetch-object($object) AS TEMPLATE
    TYPE PHYSICAL
    REQUIRES @EXE.FETCH-OBJECT-CAPABILITY
    ROOT @OUT.FETCH.1
    INCLUDE

    @OUT.FETCH.1 = {
        AGENT @SELF;
        THEME $object;
    }
;

DEFINE greet-human($human) AS TEMPLATE
    TYPE VERBAL
    REQUIRES @EXE.SPEAK-CAPABILITY
    ROOT @OUT.SPEECH-ACT.1
    INCLUDE

    @OUT.SPEECH-ACT.1 = {
        AGENT @SELF;
        THEME @OUT.GREET.1;
    }

    @OUT.GREET.1 = {
        AGENT @SELF;
        THEME $human;
    }
;

// Define GOALS --------------------

REGISTER MP backend.resources.experiments.Jan2019_1_2.SelectGoalFromLanguageInput AS select_goal_from_language_input;
REGISTER MP backend.resources.experiments.Jan2019_1_2.InitGoalCapability AS init_goal_capability;
REGISTER MP backend.resources.experiments.Jan2019_1_2.FetchObjectCapability AS fetch_object_capability;
REGISTER MP backend.resources.experiments.Jan2019_1_2.SpeakCapability AS speak_capability;
REGISTER MP backend.resources.experiments.Jan2019_1_2.ShouldAcknowledgeVisualInput AS should_acknowledge_visual_input;
REGISTER MP backend.resources.experiments.Jan2019_1_2.ShouldGreetHuman AS should_greet_human;
REGISTER MP backend.resources.experiments.Jan2019_1_2.SelectHumanToGreet AS select_human_to_greet;

DEFINE ACKNOWLEDGE-LANGUAGE-INPUT($tmr)
    AS GOAL
    IN EXE
    PRIORITY 0.5
    RESOURCES 0.5
    PLAN (acknowledge language input)
        SELECT DEFAULT
        STEP
            DO $goal = SELF.select_goal_from_language_input($tmr)
            DO $tmr[STATUS] = "ACKNOWLEDGED"
            DO $params = [$tmr]
            DO OUTPUT init-goal($goal, $params) BY SELF
    WHEN EXECUTED THEN satisfied
;

ADD TRIGGER TO @SELF.ROBOT.1 INSTANTIATE @EXE.ACKNOWLEDGE-LANGUAGE-INPUT WHEN (@ ^ @EXE.INPUT-TMR AND STATUS = "RECEIVED" and TYPE = "LANGUAGE");

DEFINE ACKNOWLEDGE-VISUAL-INPUT($vmr)
    AS GOAL
    IN EXE
    PRIORITY 0.5
    RESOURCES 0.5
    PLAN (passively register visual input)
        SELECT IF NOT SELF.should_acknowledge_visual_input($vmr)
        STEP
            DO IDLE
    PLAN (acknowledge visual input)
        SELECT IF SELF.should_greet_human($vmr)
        STEP
            DO $goal = @EXE.GREET-HUMAN
            DO $vmr[STATUS] = "ACKNOWLEDGED"
            DO $params = [SELF.select_human_to_greet($vmr)]
            DO OUTPUT init-goal($goal, $params) BY SELF
    WHEN EXECUTED THEN satisfied
;

ADD TRIGGER TO @SELF.ROBOT.1 INSTANTIATE @EXE.ACKNOWLEDGE-VISUAL-INPUT WHEN (@ ^ @EXE.INPUT-TMR AND STATUS = "RECEIVED" and TYPE = "VISUAL");

DEFINE BUILD-A-CHAIR()
    AS GOAL
    IN EXE
    PRIORITY 0.5
    RESOURCES 0.5
    PLAN (as-taught-by-jake)
        SELECT DEFAULT
        STEP
            DO $screwdriver = @ENV.SCREWDRIVER.1
            DO OUTPUT fetch-object($screwdriver) BY SELF
        STEP
            DO $bracket = @ENV.BRACKET.1
            DO OUTPUT fetch-object($bracket) BY SELF
        STEP
            DO $dowel = @ENV.DOWEL.1
            DO OUTPUT fetch-object($dowel) BY SELF
        STEP
            ... hold dowel
        STEP
            ... wait for jake to screw the stuff together
    WHEN EXECUTED THEN satisfied
;

DEFINE GREET-HUMAN($human)
    AS GOAL
    IN EXE
    PRIORITY 0.5
    RESOURCES 0.5
    PLAN (greet-normal)
        SELECT DEFAULT
        STEP
            DO OUTPUT greet-human($human) BY SELF
    WHEN EXECUTED THEN SATISFIED
;