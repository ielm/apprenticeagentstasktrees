// Effectors and capabilities

@EXE.FETCH-OBJECT-CAPABILITY = {
    ISA @EXE.CAPABILITY;
    MP "fetch_object_capability";
    COVERS-EVENT @ONT.TAKE;
};

@EXE.INIT-GOAL-CAPABILITY = {
    ISA @EXE.CAPABILITY;
    MP "init_goal_capability";
    COVERS-EVENT @ONT.MENTAL-EVENT;
};

@EXE.SPEAK-CAPABILITY = {
    ISA @EXE.CAPABILITY;
    MP  "speak";
};

@SELF.PHYSICAL-EFFECTOR.1 = {
    ISA @EXE.PHYSICAL-EFFECTOR;
    HAS-CAPABILITY @EXE.FETCH-OBJECT-CAPABILITY;
    STATUS "FREE";
};

@SELF.MENTAL-EFFECTOR.1 = {
    ISA @EXE.MENTAL-EFFECTOR;
    HAS-CAPABILITY @EXE.INIT-GOAL-CAPABILITY;
    STATUS "FREE";
};

@SELF.VERBAL-EFFECTOR.1 = {
    ISA @EXE.VERBAL-EFFECTOR;
    HAS-CAPABILITY @EXE.SPEAK-CAPABILITY;
    STATUS "FREE";
};

@SELF.ROBOT.1 += {
    PRIORITY_WEIGHT 1.5;
    RESOURCES_WEIGHT 0.25;
    HAS-EFFECTOR @SELF.PHYSICAL-EFFECTOR.1;
    HAS-EFFECTOR @SELF.MENTAL-EFFECTOR.1;
    HAS-EFFECTOR @SELF.VERBAL-EFFECTOR.1;
};

@LT.HUMAN.1 = {
    ISA @ONT.HUMAN;
    HAS-NAME "Jake";
};

@LT.TEACH.1 = {
    ISA @ONT.TEACH;
    AGENT @LT.HUMAN.1;
    BENEFICIARY @SELF.ROBOT.1;
    THEME @LT.BUILD.1;
};

// ENVIRONMENT ---------------------

@ENV.EPOCH = {};

@ENV.WORKSPACE.1 = {};
@ENV.STORAGE.1 = {};
@ENV.STORAGE.2 = {};

@ENV.SCREWDRIVER.1 = {
    ISA @ONT.SCREWDRIVER;
};

@ENV.BRACKET.1 = {
    ISA @ONT.BRACKET;
    SIDE-TB "BOTTOM";
};

@ENV.BRACKET.2 = {
    ISA @ONT.BRACKET;
    SIDE-FB "FRONT";
};

@ENV.DOWEL.1 = {
    ISA @ONT.DOWEL;
};

@ENV.HUMAN.1 = {
    ISA @ONT.HUMAN;
    RESOLVED-TO @LT.HUMAN.1;
};

@ENV.EPOCH.1 = {
    TIME 0;
    CONTAINS @ENV.HUMAN.1;
    CONTAINS @ENV.SCREWDRIVER.1;
    CONTAINS @ENV.BRACKET.1;
    CONTAINS @ENV.BRACKET.2;
    CONTAINS @ENV.DOWEL.1;
    LOCATION @ENV.LOCATION.1;
    LOCATION @ENV.LOCATION.2;
    LOCATION @ENV.LOCATION.3;
    LOCATION @ENV.LOCATION.4;
};

@ENV.LOCATION.1 = {
    DOMAIN @ENV.SCREWDRIVER.1;
    RANGE @ENV.STORAGE.1;
};

@ENV.LOCATION.2 = {
    DOMAIN @ENV.BRACKET.1;
    RANGE @ENV.STORAGE.1;
};

@ENV.LOCATION.3 = {
    DOMAIN @ENV.BRACKET.2;
    RANGE @ENV.STORAGE.2;
};

@ENV.LOCATION.4 = {
    DOMAIN @ENV.DOWEL.1;
    RANGE @ENV.STORAGE.2;
};

// Define TEMPLATES ----------------

DEFINE init-goal($definition) AS TEMPLATE
    TYPE MENTAL
    REQUIRES @EXE.INIT-GOAL-CAPABILITY
    ROOT @OUT.INIT-GOAL.1
    INCLUDE

    @OUT.INIT-GOAL.1 = {
        AGENT @SELF;
        THEME $definition;
        PARAMS $$params;
    }
;

DEFINE fetch-object($object) AS TEMPLATE
    TYPE PHYSICAL
    REQUIRES @EXE.FETCH-OBJECT-CAPABILITY
    ROOT @OUT.FETCH.1
    INCLUDE

    @OUT.FETCH.1 = {
        AGENT @SELF;
        THEME $object;
    }
;

// Define GOALS --------------------

REGISTER MP backend.resources.experiments.Jan2019_1_1.SelectGoalFromLanguageInput AS select_goal_from_language_input;
REGISTER MP backend.resources.experiments.Jan2019_1_1.InitGoalCapability AS init_goal_capability;
REGISTER MP backend.resources.experiments.Jan2019_1_1.FetchObjectCapability AS fetch_object_capability;

DEFINE ACKNOWLEDGE-LANGUAGE-INPUT($tmr)
    AS GOAL
    IN EXE
    PRIORITY 0.5
    RESOURCES 0.5
    PLAN (acknowledge language input)
        SELECT DEFAULT
        STEP
            DO $goal = SELF.select_goal_from_language_input($tmr)
            DO $tmr[STATUS] = "ACKNOWLEDGED"
            DO OUTPUT init-goal($goal) BY SELF
    WHEN EXECUTED THEN satisfied
;

ADD TRIGGER TO @SELF.ROBOT.1 INSTANTIATE @EXE.ACKNOWLEDGE-LANGUAGE-INPUT WHEN (@ ^ @EXE.INPUT-TMR AND STATUS = "RECEIVED" and TYPE = "LANGUAGE");

DEFINE ACKNOWLEDGE-VISUAL-INPUT($vmr)
    AS GOAL
    IN EXE
    PRIORITY 0.5
    RESOURCES 0.5
    PLAN (passively register visual input)
        SELECT IF NOT SELF.should_acknowledge_visual_input($vmr)
        STEP
            DO IDLE
    PLAN (acknowledge visual input)
        SELECT IF SELF.should_acknowledge_visual_input($vmr)
        STEP
            DO $goal = SELF.select_goal_from_visual_input($vmr)
            DO $vmr[STATUS] = "ACKNOWLEDGED"
            DO OUTPUT init-goal($goal, $$vmr) BY SELF
    WHEN EXECUTED THEN satisfied
;

ADD TRIGGER TO @SELF.ROBOT.1 INSTANTIATE @EXE.ACKNOWLEDGE-VISUAL-INPUT WHEN (@ ^ @EXE.INPUT-TMR AND STATUS = "RECEIVED" and TYPE = "VISUAL");

DEFINE BUILD-A-CHAIR()
    AS GOAL
    IN EXE
    PRIORITY 0.5
    RESOURCES 0.5
    PLAN (as-taught-by-jake)
        SELECT DEFAULT
        STEP
            DO $screwdriver = @ENV.SCREWDRIVER.1
            DO OUTPUT fetch-object($screwdriver) BY SELF
        STEP
            DO $bracket = @ENV.BRACKET.1
            DO OUTPUT fetch-object($bracket) BY SELF
        STEP
            DO $bracket = @ENV.BRACKET.2
            DO OUTPUT fetch-object($bracket) BY SELF
        STEP
            DO $dowel = @ENV.DOWEL.1
            DO OUTPUT fetch-object($dowel) BY SELF
    WHEN EXECUTED THEN satisfied
;






///////////////

REGISTER MP backend.resources.experiments.Jan2019_1_1.UnderstandInputMP AS understand_input;
REGISTER MP backend.resources.experiments.Jan2019_1_1.PrioritizeLearningMP AS prioritize_learning;
REGISTER MP backend.resources.experiments.Jan2019_1_1.EvalResourcesMP AS evaluate_resources;
REGISTER MP backend.resources.experiments.Jan2019_1_1.FindSomethingToDoMP AS find_something_to_do;
REGISTER MP backend.resources.experiments.Jan2019_1_1.AcknowledgeInputMP AS acknowledge_input;
REGISTER MP backend.resources.experiments.Jan2019_1_1.DecideOnLanguageInputMP AS decide_on_language_input;
REGISTER MP backend.resources.experiments.Jan2019_1_1.RespondToQueryMP AS respond_to_query;
REGISTER MP backend.resources.experiments.Jan2019_1_1.PerformComplexTaskMP AS perform_complex_task;
REGISTER MP backend.resources.experiments.Jan2019_1_1.PrintTMR AS print_tmr;
REGISTER MP backend.resources.experiments.Jan2019_1_1.AddGoalMP AS add_goal;
REGISTER MP backend.resources.experiments.Jan2019_1_1.ReactToVisualInputMP AS react_to_visual_input;
REGISTER MP backend.resources.experiments.Jan2019_1_1.GetPhysicalObjectCapabilityMP as get_physical_object;
REGISTER MP backend.resources.experiments.Jan2019_1_1.ReactToVisualInputMP as react_to_visual_input;

DEFINE UNDERSTAND-TMR($tmr)
    AS GOAL
    IN EXE
    PRIORITY SELF.prioritize_learning()
    RESOURCES SELF.evaluate_resources()
    PLAN (understand TMR)
        SELECT DEFAULT
        STEP
            DO IDLE
            // DO CAPABILITY @EXE.LEARN-CAPABILITY($tmr)
            // | THEN DO $tmr[STATUS] = "UNDERSTOOD"
    WHEN $tmr[STATUS] == "UNDERSTOOD" THEN satisfied
;


DEFINE DECIDE-ON-LANGUAGE-INPUT($tmr)
//  TODO - return $task from decide_on_language_input and create PERFORM-COMPLEX-TASK from goal definition
    AS GOAL
    IN EXE
    PRIORITY SELF.prioritize_learning($tmr)
    RESOURCES SELF.evaluate_resources($tmr)
    PLAN (decide on language input)
        SELECT DEFAULT
        STEP
            DO SELF.decide_on_language_input($tmr)
//        DO SELF[STATUS] = "SATISFIED"
    // TODO - insert WHEN condition for goal satisfaction
    WHEN EXECUTED THEN satisfied
;
DEFINE RESPOND-TO-QUERY($tmr)
    AS GOAL
    IN EXE
    PRIORITY SELF.prioritize_learning($tmr)
    RESOURCES SELF.evaluate_resources($tmr)
;
DEFINE PERFORM-COMPLEX-TASK($task)
    AS GOAL
    IN EXE
    PRIORITY SELF.prioritize_learning($task)
    RESOURCES SELF.evaluate_resources($task)
    PLAN (perform complex task)
        SELECT DEFAULT
        STEP
            DO SELF.perform_complex_task($task)
            DO IDLE
;
DEFINE REACT-TO-VISUAL-INPUT($vmr)
    AS GOAL
    IN EXE
    PRIORITY SELF.prioritize_learning($vmr)
    RESOURCES SELF.evaluate_resources($vmr)
    PLAN (react to visual input)
        SELECT DEFAULT
        STEP
            DO SELF.react_to_visual_input($vmr)
            DO IDLE
    WHEN EXECUTED THEN satisfied
;